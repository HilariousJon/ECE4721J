/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroFileRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7490597595349765119L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroFileRecord\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"filename\",\"type\":\"string\",\"doc\":\"The name of the file\"},{\"name\":\"filecontent\",\"type\":\"bytes\",\"doc\":\"The binary content of the file\"},{\"name\":\"checksum\",\"type\":\"string\",\"doc\":\"SHA-1 checksum of the file\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroFileRecord> ENCODER =
      new BinaryMessageEncoder<AvroFileRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroFileRecord> DECODER =
      new BinaryMessageDecoder<AvroFileRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AvroFileRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AvroFileRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroFileRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AvroFileRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AvroFileRecord from a ByteBuffer. */
  public static AvroFileRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The name of the file */
  @Deprecated public java.lang.CharSequence filename;
  /** The binary content of the file */
  @Deprecated public java.nio.ByteBuffer filecontent;
  /** SHA-1 checksum of the file */
  @Deprecated public java.lang.CharSequence checksum;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroFileRecord() {}

  /**
   * All-args constructor.
   * @param filename The name of the file
   * @param filecontent The binary content of the file
   * @param checksum SHA-1 checksum of the file
   */
  public AvroFileRecord(java.lang.CharSequence filename, java.nio.ByteBuffer filecontent, java.lang.CharSequence checksum) {
    this.filename = filename;
    this.filecontent = filecontent;
    this.checksum = checksum;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return filename;
    case 1: return filecontent;
    case 2: return checksum;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: filename = (java.lang.CharSequence)value$; break;
    case 1: filecontent = (java.nio.ByteBuffer)value$; break;
    case 2: checksum = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'filename' field.
   * @return The name of the file
   */
  public java.lang.CharSequence getFilename() {
    return filename;
  }

  /**
   * Sets the value of the 'filename' field.
   * The name of the file
   * @param value the value to set.
   */
  public void setFilename(java.lang.CharSequence value) {
    this.filename = value;
  }

  /**
   * Gets the value of the 'filecontent' field.
   * @return The binary content of the file
   */
  public java.nio.ByteBuffer getFilecontent() {
    return filecontent;
  }

  /**
   * Sets the value of the 'filecontent' field.
   * The binary content of the file
   * @param value the value to set.
   */
  public void setFilecontent(java.nio.ByteBuffer value) {
    this.filecontent = value;
  }

  /**
   * Gets the value of the 'checksum' field.
   * @return SHA-1 checksum of the file
   */
  public java.lang.CharSequence getChecksum() {
    return checksum;
  }

  /**
   * Sets the value of the 'checksum' field.
   * SHA-1 checksum of the file
   * @param value the value to set.
   */
  public void setChecksum(java.lang.CharSequence value) {
    this.checksum = value;
  }

  /**
   * Creates a new AvroFileRecord RecordBuilder.
   * @return A new AvroFileRecord RecordBuilder
   */
  public static avro.AvroFileRecord.Builder newBuilder() {
    return new avro.AvroFileRecord.Builder();
  }

  /**
   * Creates a new AvroFileRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroFileRecord RecordBuilder
   */
  public static avro.AvroFileRecord.Builder newBuilder(avro.AvroFileRecord.Builder other) {
    return new avro.AvroFileRecord.Builder(other);
  }

  /**
   * Creates a new AvroFileRecord RecordBuilder by copying an existing AvroFileRecord instance.
   * @param other The existing instance to copy.
   * @return A new AvroFileRecord RecordBuilder
   */
  public static avro.AvroFileRecord.Builder newBuilder(avro.AvroFileRecord other) {
    return new avro.AvroFileRecord.Builder(other);
  }

  /**
   * RecordBuilder for AvroFileRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroFileRecord>
    implements org.apache.avro.data.RecordBuilder<AvroFileRecord> {

    /** The name of the file */
    private java.lang.CharSequence filename;
    /** The binary content of the file */
    private java.nio.ByteBuffer filecontent;
    /** SHA-1 checksum of the file */
    private java.lang.CharSequence checksum;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.AvroFileRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.filename)) {
        this.filename = data().deepCopy(fields()[0].schema(), other.filename);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.filecontent)) {
        this.filecontent = data().deepCopy(fields()[1].schema(), other.filecontent);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.checksum)) {
        this.checksum = data().deepCopy(fields()[2].schema(), other.checksum);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroFileRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.AvroFileRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.filename)) {
        this.filename = data().deepCopy(fields()[0].schema(), other.filename);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.filecontent)) {
        this.filecontent = data().deepCopy(fields()[1].schema(), other.filecontent);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.checksum)) {
        this.checksum = data().deepCopy(fields()[2].schema(), other.checksum);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'filename' field.
      * The name of the file
      * @return The value.
      */
    public java.lang.CharSequence getFilename() {
      return filename;
    }

    /**
      * Sets the value of the 'filename' field.
      * The name of the file
      * @param value The value of 'filename'.
      * @return This builder.
      */
    public avro.AvroFileRecord.Builder setFilename(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.filename = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'filename' field has been set.
      * The name of the file
      * @return True if the 'filename' field has been set, false otherwise.
      */
    public boolean hasFilename() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'filename' field.
      * The name of the file
      * @return This builder.
      */
    public avro.AvroFileRecord.Builder clearFilename() {
      filename = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'filecontent' field.
      * The binary content of the file
      * @return The value.
      */
    public java.nio.ByteBuffer getFilecontent() {
      return filecontent;
    }

    /**
      * Sets the value of the 'filecontent' field.
      * The binary content of the file
      * @param value The value of 'filecontent'.
      * @return This builder.
      */
    public avro.AvroFileRecord.Builder setFilecontent(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.filecontent = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'filecontent' field has been set.
      * The binary content of the file
      * @return True if the 'filecontent' field has been set, false otherwise.
      */
    public boolean hasFilecontent() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'filecontent' field.
      * The binary content of the file
      * @return This builder.
      */
    public avro.AvroFileRecord.Builder clearFilecontent() {
      filecontent = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'checksum' field.
      * SHA-1 checksum of the file
      * @return The value.
      */
    public java.lang.CharSequence getChecksum() {
      return checksum;
    }

    /**
      * Sets the value of the 'checksum' field.
      * SHA-1 checksum of the file
      * @param value The value of 'checksum'.
      * @return This builder.
      */
    public avro.AvroFileRecord.Builder setChecksum(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.checksum = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'checksum' field has been set.
      * SHA-1 checksum of the file
      * @return True if the 'checksum' field has been set, false otherwise.
      */
    public boolean hasChecksum() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'checksum' field.
      * SHA-1 checksum of the file
      * @return This builder.
      */
    public avro.AvroFileRecord.Builder clearChecksum() {
      checksum = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroFileRecord build() {
      try {
        AvroFileRecord record = new AvroFileRecord();
        record.filename = fieldSetFlags()[0] ? this.filename : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.filecontent = fieldSetFlags()[1] ? this.filecontent : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.checksum = fieldSetFlags()[2] ? this.checksum : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroFileRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroFileRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroFileRecord>
    READER$ = (org.apache.avro.io.DatumReader<AvroFileRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
